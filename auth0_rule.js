/*
*  This rule been automatically generated by auth0-authz-extension
*  Updated by pavel.p@gpnxgroup.com, 2019-07-17T17:16:44.871Z
 */
function (user, context, callback) {
  var _ = require('lodash');
  var EXTENSION_URL = "https://dev-prom.us8.webtask.io/adf6e2f2b84784b57522e3b19dfc9201";

  var audience = '';
  audience = audience || (context.request && context.request.query && context.request.query.audience);
  if (audience === 'urn:auth0-authz-api') {
    return callback(new UnauthorizedError('no_end_users'));
  }

  audience = audience || (context.request && context.request.body && context.request.body.audience);
  if (audience === 'urn:auth0-authz-api') {
    return callback(new UnauthorizedError('no_end_users'));
  }

  getPolicy(user, context, function(err, res, data) {
    if (err) {
      console.log('Error from Authorization Extension:', err);
      return callback(new UnauthorizedError('Authorization Extension: ' + err.message));
    }

    if (res.statusCode !== 200) {
      console.log('Error from Authorization Extension:', res.body || res.statusCode);
      return callback(
        new UnauthorizedError('Authorization Extension: ' + ((res.body && (res.body.message || res.body) || res.statusCode)))
      );
    }

    // Update the user object.
    user.groups = data.groups;

    var group;
    function groupCheck(value){
      return value === group;
    }

    //group = 'aws_auth0_role_dev';
    //if(user.groups.find(groupCheck) && context.clientName === "AWS"){
    //  user.awsRole = 'arn:aws:iam::553748148142:role/aws_auth0_role_dev,arn:aws:iam::553748148142:saml-provider/auth0_dev';
    //  user.awsRoleSession = user.name;
    // context.samlConfiguration.mappings = {
    //    'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',
    //    'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession'
     // };
    //}
    
    if(context.clientID === "l337YRobtQ7DApz474y6g6bxU0yxXz7J"){
      var aws_groups = user.groups.filter(group => group.match('aws') !== null);
      aws_groups.forEach((g,i)=> {
      var newEl = aws_groups[i].replace('aws_','');
      aws_groups[i] = `arn:aws:iam::553748148142:role/${newEl},arn:aws:iam::553748148142:saml-provider/auth0_dev`;});
      user.awsRole = aws_groups;
      user.awsRoleSession = user.name;
      context.samlConfiguration.mappings = {
       'https://aws.amazon.com/SAML/Attributes/Role': 'awsRole',
       'https://aws.amazon.com/SAML/Attributes/RoleSessionName': 'awsRoleSession'
     };
    }

    if(context.clientID === "ELTlFNn8lpwuJ0i8Qi7U2yA0tejrEI3n"){
       var jenkins_groups = user.groups.filter(group => group.match('jenkins') !== null);
       jenkins_groups.forEach((g,i)=> {jenkins_groups[i] = jenkins_groups[i].replace('jenkins_','');});
       user.groups = jenkins_groups;
    }
   
    return callback(null, user, context);
  });
  
  // Convert groups to array
  function parseGroups(data) {
    if (typeof data === 'string') {
      // split groups represented as string by spaces and/or comma
      return data.replace(/,/g, ' ').replace(/\s+/g, ' ').split(' ');
    }
    return data;
  }

  // Get the policy for the user.
  function getPolicy(user, context, cb) {
    request.post({
      url: EXTENSION_URL + "/api/users/" + user.user_id + "/policy/" + context.clientID,
      headers: {
        "x-api-key": configuration.AUTHZ_EXT_API_KEY
      },
      json: {
        connectionName: context.connection || user.identities[0].connection,
        groups: parseGroups(user.groups)
      },
      timeout: 5000
    }, cb);
  }
}
